---
{{#if (eq runtime "next")}}
path: src/app/api/discord/[...slug]/route.ts
{{else}}
path: src/index.ts
{{/if}}
---

{{#if (eq runtime "node")}}
import 'dotenv/config';
{{/if}}
import { Client, createHandle } from "@buape/carbon"
{{#if plugins.linkedRoles}}
import { LinkedRoles, ApplicationRoleConnectionMetadataType } from "@buape/carbon/linked-roles"
{{/if}}
{{#if (eq runtime "node")}}
import { createServer } from "@buape/carbon/adapters/node"
{{else if (eq runtime "bun") }}
import { createServer } from "@buape/carbon/adapters/bun"
{{else if (eq runtime "cloudflare") }}
import { createHandler } from "@buape/carbon/adapters/cloudflare"
{{else if (eq runtime "next") }}
import { createHandler } from "@buape/carbon/adapters/nextjs"
{{/if}}
{{#if (eq runtime "next")}}
import PingCommand from "~/commands/ping"
import ButtonCommand from "~/commands/button"
{{else}}
import PingCommand from "./commands/ping.js"
import ButtonCommand from "./commands/button.js"
{{/if}}

const handle = createHandle((env) => {
	const client = new Client(
		{
			baseUrl: String(env.BASE_URL),
			deploySecret: String(env.DEPLOY_SECRET),
			clientId: String(env.DISCORD_CLIENT_ID),
			clientSecret: String(env.DISCORD_CLIENT_SECRET),
			publicKey: String(env.DISCORD_PUBLIC_KEY),
			token: String(env.DISCORD_BOT_TOKEN)
		},
		[
			new PingCommand(),
			new ButtonCommand()
		]
	)
	{{#if plugins.linkedRoles}}
	const linkedRoles = new LinkedRoles(client, {
		metadata: [
			{
				key: "is_staff",
				name: "Verified Staff",
				description: "Whether the user is a verified staff member",
				type: ApplicationRoleConnectionMetadataType.BooleanEqual
			},
		],
		metadataCheckers: {
			is_staff: async (userId) => {
				const isAllowed = ["439223656200273932"]
				if (isAllowed.includes(userId)) return true
				return false
			}
		}
	})
	{{/if}}
	return [client{{#if plugins.linkedRoles}}, linkedRoles{{/if}}]
})

{{#if (or (eq runtime "node") (eq runtime "bun"))}}
createServer(handle, { port: 3000 })
{{else if (eq runtime "cloudflare")}}
const handler = createHandler(handle)
export default { fetch: handler }
{{else if (eq runtime "next")}}
const handler = createHandler(handle)
export { handler as GET, handler as POST }
{{/if}}