---
{{#if (eq runtime "next")}}
path: src/app/api/discord/[...slug]/route.ts
{{else}}
path: src/index.ts
{{/if}}
---

{{#if (eq runtime "node")}}
import 'dotenv/config';
{{/if}}
import { Client } from "@buape/carbon"
{{#if plugins.linkedRoles}}
import { LinkedRoles, ApplicationRoleConnectionMetadataType } from "@buape/carbon/linked-roles"
{{/if}}
{{#if plugins.gateway}}
import { GatewayPlugin } from "@buape/carbon/gateway"
{{/if}}
{{#if (eq runtime "node")}}
import { createServer } from "@buape/carbon/adapters/node"
{{else if (eq runtime "bun")}}
import { createServer } from "@buape/carbon/adapters/bun"
{{else if (or (eq runtime "cloudflare") (eq runtime "next"))}}
import { createHandler } from "@buape/carbon/adapters/fetch"
{{/if}}
{{#if (eq runtime "next")}}
import PingCommand from "~/commands/ping"
import ButtonCommand from "~/commands/button"
import AuthorizedEvent from "~/events/authorized"
{{#if plugins.gateway}}
import MessageCreateListener from "~/events/messageCreate"
{{/if}}
{{else}}
import PingCommand from "./commands/ping.js"
import ButtonCommand from "./commands/button.js"
import ApplicationAuthorizedListener from "./events/authorized.js"
{{#if plugins.gateway}}
import MessageCreateListener from "./events/messageCreate.js"
{{/if}}
{{/if}}

{{#if plugins.linkedRoles}}
const linkedRoles = new LinkedRoles({
	metadata: [
		{
			key: "is_staff",
			name: "Verified Staff",
			description: "Whether the user is a verified staff member",
			type: ApplicationRoleConnectionMetadataType.BooleanEqual
		},
	],
	metadataCheckers: {
		is_staff: async (userId) => {
			const isAllowed = ["439223656200273932"]
			if (isAllowed.includes(userId)) return true
			return false
		}
	}
})
{{/if}}

{{#if plugins.gateway}}
const gateway = new GatewayPlugin({
	intents: 513 // Add your required intents here
})
{{/if}}

const client = new Client(
	{
		baseUrl: process.env.BASE_URL,
		deploySecret: process.env.DEPLOY_SECRET,
		clientId: process.env.DISCORD_CLIENT_ID,
		{{#if plugins.linkedRoles}}
		clientSecret: process.env.DISCORD_CLIENT_SECRET,
		{{/if}}
		publicKey: process.env.DISCORD_PUBLIC_KEY,
		token: process.env.DISCORD_BOT_TOKEN,
	},
	{
		commands: [
			new PingCommand(),
			new ButtonCommand()
		], 
		listeners: [
			new ApplicationAuthorizedListener(){{#if plugins.gateway}},
			new MessageCreateListener(){{/if}}
		],
	}{{#if (or plugins.linkedRoles plugins.gateway)}},
	[{{#if plugins.linkedRoles}}linkedRoles{{/if}}{{#if (and plugins.linkedRoles plugins.gateway)}}, {{/if}}{{#if plugins.gateway}}gateway{{/if}}]{{/if}}
)

{{#if (or (eq runtime "node") (eq runtime "bun"))}}
createServer(client, { port: 3000 })
{{else if (eq runtime "cloudflare")}}
const handler = createHandler(client)
export default { fetch: handler }
{{else if (eq runtime "next")}}
const handler = createHandler(client)
export { handler as GET, handler as POST }
{{/if}}

declare global {
	namespace NodeJS {
		interface ProcessEnv {
			BASE_URL: string;
			DEPLOY_SECRET: string;
			DISCORD_CLIENT_ID: string;
			{{#if plugins.linkedRoles}}
			DISCORD_CLIENT_SECRET: string;
			{{/if}}
			DISCORD_PUBLIC_KEY: string;
			DISCORD_BOT_TOKEN: string;
		}
	}
}
